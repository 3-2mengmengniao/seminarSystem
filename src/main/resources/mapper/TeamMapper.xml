<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.test.seminar.mapper.TeamMapper">
    <resultMap id="teamResultMap" type="com.test.seminar.entity.Team">
        <id property="id" column="id" />
        <result property="status" column="status"/>
        <association property="leader" column="leader_id" javaType="com.test.seminar.entity.Student" select="com.test.seminar.mapper.StudentMapper.getStudentByStudentId"/>
        <association property="serial" javaType="com.test.seminar.entity.Serial" column="id" select="com.test.seminar.mapper.TeamMapper.getSerialByTeamId"/>
        <association property="course" javaType="com.test.seminar.entity.Course" column="course_id" select="com.test.seminar.mapper.CourseMapper.getCourseByCourseId"/>
        <association property="courseClass" javaType="com.test.seminar.entity.CourseClass" column="klass_id" select="com.test.seminar.mapper.CourseClassMapper.getCourseClassByCourseClassId"/>
        <collection property="questionList" column="id" javaType="ArrayList" ofType="com.test.seminar.entity.Question" select="com.test.seminar.mapper.QuestionMapper.getQuestionByTeamId"/>
        <collection property="memberList" column="id" javaType="ArrayList" ofType="com.test.seminar.entity.Student" select="com.test.seminar.mapper.StudentMapper.getStudentByTeamId"/>
    </resultMap>

    <resultMap id="teamNotLoadResultMap" type="com.test.seminar.entity.Team">
        <id property="id" column="id" />
        <result property="teamName" column="team_name"/>
        <association property="leader" column="leader_id" javaType="com.test.seminar.entity.Student" select="com.test.seminar.mapper.StudentMapper.getStudentByStudentId"/>
        <association property="serial" javaType="com.test.seminar.entity.Serial">
            <result property="courseClassSerial" column="klass_serial"/>
            <result property="teamSerial" column="team_serial"/>
        </association>
        <association property="courseClass" javaType="com.test.seminar.entity.CourseClass" column="klass_id" select="com.test.seminar.mapper.CourseClassMapper.getCourseClassByCourseClassId"/>
        <collection property="questionList" column="id" javaType="ArrayList" ofType="com.test.seminar.entity.Question" select="com.test.seminar.mapper.QuestionMapper.getQuestionByTeamId"/>
        <collection property="memberList" ofType="com.test.seminar.entity.Student">
            <id property="id" column="my_student_id"/>
            <result property="account" column="account"/>
            <result property="studentName" column="student_name"/>
        </collection>
    </resultMap>

    <resultMap id="teamValidResultMap" type="com.test.seminar.entity.TeamValidApplication">
        <id property="id" column="id"/>
        <result property="status" column="team_valid_application.status"/>
        <association property="team" column="id" javaType="com.test.seminar.entity.Team" select="getTeamByTeamValidApplicationId"/>
    </resultMap>

    <resultMap id="SerialResultMap" type="com.test.seminar.entity.Serial">
        <result property="courseClassSerial" column="klass_serial"/>
    </resultMap>

    <resultMap id="teamStrategyResultMap" type="com.test.seminar.entity.strategy.TeamStrategy">
        <association property="course" javaType="com.test.seminar.entity.Course" column="id" select="getCourseByCourseId"/>
    </resultMap>

    <resultMap id="conflictCourseStrategyResultMap" type="com.test.seminar.entity.strategy.impl.ConflictCourseStrategy">
        <id property="id" column="id"/>
        <collection property="conflictCourseIdList" javaType="ArrayList" ofType="java.math.BigInteger" column="id" select="getCourseIdByConflictCourseStrategyId"/>
    </resultMap>

    <select id="getTeamByTeamId" resultMap="teamResultMap">
        SELECT id,klass_id,course_id,team_name,team_serial,klass_serial,leader_id,status
        FROM team
        WHERE id=#{teamId}
    </select>

    <select id="getSerialByTeamId" resultMap="SerialResultMap">
        SELECT team_serial,klass_serial
        FROM team
        WHERE id=#{teamId}
    </select>

    <select id="getTeamByStudentIdAndCourseId" resultMap="teamResultMap">
        SELECT id,klass_id,course_id,team_name,leader_id,team_serial,klass_serial,status
        FROM team,team_student
        WHERE  team.course_id=#{courseId} and team_student.team_id=team.id and team_student.student_id=#{studentId}
        </select>

    <select id="getTeamByMainCourseClassIdAndTeamSerial" resultMap="teamResultMap">
        SELECT id,klass_id,course_id,team_name,leader_id,team_serial,klass_serial,status
        FROM team
        WHERE  klass_id=#{courseClassId} and team_serial=#{teamSerial}
    </select>

    <select id="getTeamByCourseId" resultMap="teamResultMap">
        SELECT team.id as id,team.klass_id as klass_id,team_name,leader_id,klass_serial,team_serial,status,course_id
        FROM team,klass,klass_team
        WHERE klass.course_id=#{courseId} and klass_team.klass_id=klass.id and team.id=klass_team.team_id
    </select>

    <select id="getTeamBySeminarControlId" resultMap="teamResultMap">
        SELECT team.id as id,klass_id,team_name,leader_id,course_id,team_serial,klass_serial,status
        FROM attendance,team
        WHERE klass_seminar_id=#{seminarControlId} and team.id=attendance.team_id
    </select>

    <select id="getTeamByCourseClassId" resultMap="teamResultMap">
        SELECT id,team.klass_id as klass_id,team_name,leader_id,course_id,team_serial,klass_serial,status
        FROM klass_team,team
        WHERE klass_team.team_id=team.id and klass_team.klass_id=#{courseClassId}
    </select>

    <select id="getMaxTeamSerialByCourseClassId" resultType="Integer">
        SELECT MAX(team_serial)
        FROM team,klass_team
        WHERE klass_team.klass_id=#{courseClassId} and team.id=klass_team.team_id
    </select>

    <select id="getGroupStudentByCourseId" resultMap="teamNotLoadResultMap">
        SELECT team.id,
        team_name,
        team.klass_serial,
        team.team_serial,
        leader_id,
        student.id as my_student_id,
        student_name,
        account
        FROM team,student,team_student,klass_team,klass
        WHERE klass.course_id=#{courseId}
        and student.id=team_student.student_id
        and team.id=team_student.team_id
        and klass_team.klass_id=klass.id
        and klass_team.team_id=team.id
    </select>

    <insert id="insertTeam">
        insert into team(klass_id,course_id,team_name,leader_id,status,team_serial,klass_serial)
        values(#{courseClassId},#{courseId},#{team.teamName},#{team.leader.id},#{team.status},#{team.serial.teamSerial},#{team.serial.courseClassSerial})
    </insert>

    <insert id="insertCourseClassAndTeamRelation">
        insert into klass_team(klass_id,team_id)
        values(#{courseClassId},#{teamId})
    </insert>

    <insert id="insertTeamAndStudentRelation">
        insert into team_student(team_id,student_id)
        values(#{teamId},#{studentId})
    </insert>

    <update id="updateTeam">
        update team
        <set>
            <if test="team.status!=null">
                status=#{team.status},
            </if>
            <if test="team.teamName!=null">
                team_name=#{team.teamName},
            </if>
        </set>
        where id=#{team.id}
    </update>

    <delete id="deleteCourseClassAndTeamRelation">
        delete from klass_team where team_id=#{teamId} and klass_id=#{courseClassId}
    </delete>

    <delete id="deleteCourseClassAndTeamRelationByTeamId">
        delete from klass_team where team_id=#{teamId}
    </delete>

    <delete id="deleteTeamAndStudentRelation">
        delete from team_student where team_id=#{teamId} and student_id=#{studentId}
    </delete>

    <delete id="deleteTeamAndStudentRelationByTeamId">
        delete from team_student where team_id=#{teamId}
    </delete>

    <delete id="deleteTeamByTeamId">
        delete from team where id=#{teamId}
    </delete>

    <update id="updateCourseClassStudentTeamId">
        update team_student
        <set>
            <if test="teamId!=null">
                team_student.team_id=#{teamId},
            </if>
        </set>
        from klass_student
        where  team_student.student_id=#{studentId} and klass_student.student_id=team_student.student_id and klass_id=#{courseClassId}
    </update>

    <select id="getTeamValidApplicationByTeacherId" resultMap="teamValidResultMap">
        select id,team_id,teacher_id,reason,team_valid_application.status
        from team_valid_application
        where teacher_id=#{teacherId}
    </select>

    <select id="getTeamByTeamValidApplicationId" resultMap="teamResultMap">
        select team.id,team_name,leader_id,course_id,team_serial,klass_serial,team_valid_application.status
        from team,team_valid_application
        where team_valid_application.id=#{teamValidApplicationId} and team.id=team_valid_application.team_id
    </select>

    <insert id="insertTeamValidApplication">
        insert into team_valid_application(team_id,teacher_id,reason,status)
        values (#{teamId},#{teacherId},#{teamValidApplication.reason},#{teamValidApplication.status})
    </insert>

    <update id="updateTeamValidApplication">
        update team_valid_application
        <set>
            <if test="teamValidApplication.status!=null">
                status=#{teamValidApplication.status},
            </if>
        </set>
        where id=#{teamValidApplication.id}
    </update>

    <delete id="deleteTeamValidApplicationByTeamValidApplicationId">
        delete from team_valid_application where id=#{teamValidApplicationId}
    </delete>

    <select id="getTeamStrategyListByCourseId" resultMap="teamStrategyResultMap">
        select course_id,strategy_name,strategy_id
        from team_strategy
        where course_id=#{courseId}
    </select>

    <select id="getMemberLimitStrategyByStrategyId" resultType="com.test.seminar.entity.strategy.impl.MemberLimitStrategy">
        select id,min_member,max_member
        from member_limit_strategy
        where id=#{strategyId}
    </select>

    <update id="updateMemberLimitStrategy">
        update member_limit_strategy
        <set>
            <if test="member_limit_strategy.min_member!=null">
                min_member=#{member_limit_strategy.min_member},
            </if>
            <if test="member_limit_strategy.max_member!=null">
                max_member=#{member_limit_strategy.max_member},
            </if>
        </set>
    </update>

    <delete id="deleteMemberLimitStrategyByStrategyId">
        delete from member_limit_strategy where id=#{strategyId}
    </delete>

    <select id="getCourseMemberLimitStrategyByStrategyId" resultType="com.test.seminar.entity.strategy.impl.CourseMemberLimitStrategy">
        select id,course_id,min_member,max_member
        from course_member_limit_strategy
        where id=#{strategyId}
    </select>

    <select id="getCourseIdByConflictCourseStrategyId" resultType="java.math.BigInteger">
        select course_id
        from conflict_course_strategy
        where id=#{strategyId}
    </select>

    <select id="getConflictCourseStrategyByStrategyId" resultMap="conflictCourseStrategyResultMap">
        select id,course_id
        from conflict_course_strategy
        where id=#{strategyId}
    </select>

    <select id="getStrategyPairByTeamAndStrategyId" resultType="com.test.seminar.entity.strategy.StrategyPair">
        select strategy_name,strategy_id
        from team_and_strategy
        where id=#{teamAndStrategyId}
    </select>

    <select id="getStrategyPairByTeamOrStrategyId" resultType="com.test.seminar.entity.strategy.StrategyPair">
        select strategy_name,strategy_id
        from team_or_strategy
        where id=#{teamOrStrategyId}
    </select>

    <select id="getMaxTeamAndStrategyId" resultType="java.math.BigInteger">
        select max(id)
        from team_and_strategy
    </select>

    <select id="getMaxTeamOrStrategyId" resultType="java.math.BigInteger">
        select max(id)
        from team_or_strategy
    </select>

    <select id="getMaxConflictCourseStrategyId" resultType="java.math.BigInteger">
        select max(id)
        from conflict_course_strategy
    </select>

    <select id="getMaxMemberLimitStrategyId" resultType="java.math.BigInteger">
        select max(id)
        from member_limit_strategy
    </select>

    <select id="getMaxCourseMemberLimitStrategyId" resultType="java.math.BigInteger">
        select max(id)
        from course_member_limit_strategy
    </select>

    <insert id="insertTeamStrategy">
        insert into team_strategy(course_id,strategy_name,strategy_id)
        value (#{courseId},#{strategyName},#{strategyId})
    </insert>

    <insert id="insertTeamAndStrategy">
        insert into team_and_strategy(id,strategy_name,strategy_id)
        value (#{id},#{strategyName},#{strategyId})
    </insert>

    <insert id="insertTeamOrStrategy">
        insert into team_or_strategy(id,strategy_name,strategy_id)
        value (#{id},#{strategyName},#{strategyId})
    </insert>

    <insert id="insertConflictCourseStrategy">
        insert into conflict_course_strategy(id,course_id)
        value (#{id},#{courseId})
    </insert>

    <insert id="insertCourseMemberLimitStrategy" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        insert into course_member_limit_strategy(course_id,min_member,max_member)
        value (#{courseMemberLimitStrategy.courseId},#{courseMemberLimitStrategy.minMember},#{courseMemberLimitStrategy.maxMember})
    </insert>

    <insert id="insertMemberLimitStrategy" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        insert into member_limit_strategy(min_member,max_member)
        value (#{memberLimitStrategy.minMember},#{memberLimitStrategy.maxMember})
    </insert>

    <select id="getTeamValidApplicationByApplicationId" resultMap="teamValidResultMap">
        select id,team_id,teacher_id,reason,team_valid_application.status
        from team_valid_application
        where id=#{applicationId}
    </select>
</mapper>